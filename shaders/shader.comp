#version 460

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba8, binding = 0) uniform imageBuffer imgOut;

layout(std140, binding = 1) uniform Parameters
{
	dvec2 center;
	double zoom;
	ivec2 resolution;
	uint maxIters;
};

vec4 ToColor(float r)
{
	const vec3 colors[5] = vec3[](
			vec3(0, 7, 100) / 255.0,
			vec3(32, 107, 203) / 255.0,
			vec3(237, 255, 255) / 255.0,
			vec3(255, 170, 0) / 255.0,
			vec3(0, 2, 0) / 255.0);

	vec3 c1 = colors[int(mod(r, 5))];
	vec3 c2 = colors[int(mod(r + 1, 5))];
	return vec4(mix(c1, c2, mod(r, 1)), 1);
}

vec4 FractalColor(dvec2 coord)
{
	dvec2 z = dvec2(0, 0);
	dvec2 c = coord;
	for (uint i = 0; i < maxIters; ++i)
	{
		z = dvec2(z.x * z.x - z.y * z.y, 2 * z.x * z.y) + c;
		const float zLen = length(vec2(z.x, z.y));
		if (zLen > 4)
			return ToColor((i + 1 - log(log(zLen)) / log(2)) / 10);
	}
	return vec4(0, 0, 0, 1);
}

void main() 
{
	if (gl_GlobalInvocationID.x < resolution.x && gl_GlobalInvocationID.y < resolution.y)
	{
		int idx = int(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * resolution.x);
		vec2 uv = vec2(float(gl_GlobalInvocationID.x), float(gl_GlobalInvocationID.y)) / (resolution - 1) * 2 - 1;
		dvec2 coord = dvec2(uv.x * float(resolution.x) / float(resolution.y), -uv.y) * zoom + center;
		vec4 color = FractalColor(coord);
		imageStore(imgOut, idx, color.zyxw);
	}
}